Ejer.1 MatrizTranspuesta---
     .h
#pragma once
#define MAX 100
class MatrizTranspuesta
{
private:
	int M[MAX][MAX];
	int n,m;
public:
	MatrizTranspuesta(void);
	~MatrizTranspuesta(void);
	void trasponermatriz(int M[MAX][MAX],int n, int m);
};
      .cpp
#include "StdAfx.h"
#include "MatrizTranspuesta.h"
#include <iostream>
using namespace std;

MatrizTranspuesta::MatrizTranspuesta(void)
{
}


MatrizTranspuesta::~MatrizTranspuesta(void)
{
}
void cargarmatriz(int M[MAX][MAX], int n, int m){

}
void MatrizTranspuesta::trasponermatriz(int M[MAX][MAX],int n, int m){
	int M1[MAX][MAX];

	for(int i=0;i<n;i++)
     {for(int j=0;j<m;j++)
       {
			   M[i][j]=M1[j][i];
			   cout<<M1[i][j]<<"\t";
	    }
	cout<<endl;

	}
}
  ejemplo.cpp
   
#include "stdafx.h"
#include "MatrizTranspuesta.h"
#include <iostream>
#include "conio.h"
using namespace std;

void main()
{ int M[MAX][MAX],M1[MAX][MAX],n,m;
     cout<<"Ingrese la cantidad de columnas";
	 cin>>n;
	 cout<<"Ingrese la cantidad de filas";
	 cin>>m;
	MatrizTranspuesta MM;
	cout<<"La matriz traspuesta es: "<<MM.trasponermatriz<<endl;
}
Ejerc2 Matrizinversa---
       .h
#pragma once
#define MAX 100

class MatrizInversa
{ private:
  int M[MAX][MAX], n,m;

public:
	MatrizInversa(void);
	~MatrizInversa(void);
	void cargarMatInversa(int M[MAX][MAX],int n,int m);
	void mostrar_matriz_inversa(int mat[MAX][MAX], int n, int m);
	void matriz_inversa(int M[MAX][MAX], int M1[MAX][MAX], int n, int m);
};       

       .cpp
#include "StdAfx.h"
#include "MatrizInversa.h"
#include <iostream>
using namespace std;

MatrizInversa::MatrizInversa(void)
{
}
MatrizInversa::~MatrizInversa(void)
{
}
void MatrizInversa::cargarMatInversa(int M[MAX][MAX],int n,int m){
	for(int i=0;i<n;i++)
	{  for(j=0;j<n;j++)
	    {
			cout << " Introducir Elemento: ";
			cin >>M[i][j];
	    }
	}
}
void MatrizInversa::matriz_inversa(int M[MAX][MAX], int M1[MAX][MAX], int n, int m){
	int i,j,c,k,d=0;
	double aux1,aux2,aux;
	for(j=0;j<n-1;j++)
	  { for(i=n-1;i>d;i--)
		{
			c=j;
			aux1=mat[i][j];
			aux2=mat[c][j];
		for(k=0;k<n;k++)
		{
			mat[i][k]=mat[i][k]*aux2-aux1*mat[c][k];
			mat1[i][k]=mat1[i][k]*aux2-aux1*mat1[c][k];
		}
	}
	d++;
	}
	d=0;
	for(j=n-1;j>0;j--)
	{
		for(i=0;i<n-1-d;i++)
		{  
			c=j;
			aux1=M[i][j];
			aux2=M[c][j];
			for(k=0;k<n;k++)
			{
				mat[i][k]=mat[i][k]*aux2-aux1*mat[c][k];
				mat1[i][k]=mat1[i][k]*aux2-aux1*mat1[c][k];
			}
		}
		d++;
	}
	for(i=0;i<n;i++)
	  {  for(j=0;j<n;j++)
	      {
			  if(i==j && mat[i][j]!=0)
			  {
				  aux=mat[i][j];
				  for(k=0;k<n;k++)
				  {
					  mat[i][k]= mat[i][k]/aux;
					  mat1[i][k]= mat1[i][k]/aux;
				  }
			  }
	     }
	}
}
void MatrizInversa::mostrar_matriz_inversa(int mat[MAX][MAX], int n, int m){
	for(int i=0;i<n;i++)
	{  for(j=0;j<n;j++)
	   { 
		   if(mat[i][j]>=0)
		      {
				 cout << " " << mat[i][j];
		      }
		   else{
			     cout << " " << mat[i][j];
		       }
	   }
	cout << " " << endl;
	}
}
        ejercicio2.cpp

#include "stdafx.h"
#include "MatrizInversa.h"
#include <iostream>
using namespace std;

void main()
{
	MatrizInversa Mi;
	Mi.cargarMatInversa;
	Mi.matriz_inversa;
	Mi.mostrar_matriz_inversa;
}

   ---Ejercicio3---   
         .h
#pragma once
#define MAX 100

class SumaMat
{
private:
	int M[MAX][MAX], M1[MAX][MAX],n,m;

public:
	SumaMat(void);
	~SumaMat(void);
	void cargar_matriz(int M[MAX][MAX], int n, int m);
	void suma_matrices(int M[MAX][MAX], int M1[MAX][MAX],int n,int m);
	void mostrar_matriz(int M[MAX][MAX], int n, int m);

};
         .cpp
#include "StdAfx.h"
#include "SumaMat.h"
#include <iostream>
using namespace std;

SumaMat::SumaMat(void)
{
}
SumaMat::~SumaMat(void)
{
}
void cargar_matriz(int M[MAX][MAX], int n, int m){
	for(int i=0;i<n;i++)
		for(j=0;j<m;j++)
		  {cout<<"ingrese ["<<i<<"]["<<j<<"]=";
	       cin>>M[i][j];
	      }
}
void suma_matrices(int M[MAX][MAX], int M1[MAX][MAX],int n,int m){
	int C[MAX][MAX];
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			{C[i][j]=M[i][j]+M1[i][j];
	        }
	for(int i=0;i<n;i++)
	  {for(j=0;j<m;j++)
	     cout<<C[i][j]<<"\t";
	     cout<<endl;
	  }
}
void mostrar_matriz(int M[MAX][MAX], int n, int m){
	for(int i=0;i<n;i++)
	   {for(int j=0;j<m;j++)
	      {
			  cout<<M[i][j]<<"\t";
	      }
	cout<<endl;
	}
}
       Ejercicio3.cpp
#include "stdafx.h"
#include "SumaMat.h"
#include <iostream>
using namespace std;

void main()
{
	SumaMat SM;
	SM.cargar_matriz;
	SM.suma_matrices;
	SM.mostrar_matriz;

}
         
 ----Ejercicio4----
 
         .h
#pragma once
#define MAX 100

class MultMat
{
private:
	int M[MAX][MAX], M1[MAX][MAX], n,m;
public:
	MultMat(void);
	~MultMat(void);
	void cargar_matriz(int M[MAX][MAX], int n, int m);
	void multiplicacion_matrices(int M[MAX][MAX], int M1[MAX][MAX],int n,int cm, int fil1, int col1);
	void mostrar_matriz(int A[MAX][MAX], int fil, int col);

};         
        .cpp
#include "StdAfx.h"
#include "MultMat.h"
#include <iostream>
using namespace std;

MultMat::MultMat(void)
{
}
MultMat::~MultMat(void)
{
}
void cargar_matriz(int A[MAX][MAX], int fil, int col){	
	int i,j;
	for(i=0;i<fil;i++)
		for(j=0;j<col;j++)
		{cout<<"ingrese ["<<i<<"]["<<j<<"]=";
	     cin>>A[i][j];
	    }
}
        
void mostrar_matriz(int A[MAX][MAX], int fil, int col)

{	int i,j;
       for(i=0;i<fil;i++)
	      {for(j=0;j<col;j++)
	   {
		   cout<<A[i][j]<<"\t";
	   }
	   cout<<endl;
	   }
}
void multiplicacion_matrices(int M[MAX][MAX], int M1[MAX][MAX],int n,int cm, int fil1, int col1){
	int C[MAX][MAX],i,j,filC,colC,k,x;
	  if(n==fil1)
	    {filC=n;

		colC=col1;

		x=n=fil1;

		for(i=0;i<filC;i++)

			for(j=0;j<colC;j++)
			{
				C[i][j]=0;
				for(k=0;k<x;k++)
					C[i][j]=C[i][j]+(M[i][k]*M1[k][j]);
			}
	  }
	else
		cout<<"ERROR---no se puede realizar la operacion"<<endl;
	 
	  for(i=0;i<filC;i++)
	     {for(j=0;j<colC;j++)
	        {cout<<C[i][j]<<"\t";}
	         cout<<endl;
	      }
}

        Ejercicio4.cpp
#include "stdafx.h"
#include "MultMat.h"
#include <iostream>
#include "conio.h"
using namespace std;

void main()
{ 
	MultMat MM;
	MM.cargar_matriz;
	MM.multiplicacion_matrices;
	MM.mostrar_matriz;
	getch();
}
-----Ejercicio5----
        .h
#pragma once
#define MAX 100

class VerificarMagica
{
private:
	int M[MAX][MAX],M1[MAX][MAX],n,m;
public:
	VerificarMagica(void);
	~VerificarMagica(void);
	void cargarmatriz(int M[MAX][MAX], int n, int m);
	void verificar_magica(int M[MAX][MAX], int n, int m);
	void mostrarmatriz(int M[MAX][MAX], int n, int m);
};

        .cpp
#include "StdAfx.h"
#include "VerificarMagica.h"
#include <iostream>
using namespace std;

VerificarMagica::VerificarMagica(void)
{
}
VerificarMagica::~VerificarMagica(void)
{
}
void cargarmatriz(int A[MAX][MAX], int n, int m){
	for(int i=0;i<n;i++)
	  {for(int j=0;j<m;j++)
	     {	
			 cout<<"M["<<i<<"]["<<j<<"]="<<endl;
			 cin>>M[i][j];
	     }
	}
}
void VerificarMagica::mostrarmatriz(int M[MAX][MAX], int n, int m){
	for(int i=0;i<n;i++)
	  {for(int j=0;j<m;j++)
	     {	
			 cout<<M[i][j]<<"\t";
	     }
	cout<<endl;
	}

}
void VerificarMagica::verificar_magica(int M[MAX][MAX], int n, int m){	
	int i,j,vec[1000],tamv,aux,k;
	tamv=0;
	aux=0;
	for(i=0;i<n;i++)
	  {	for(j=0;j<m;j++)
	     {
			 aux=aux+M[i][j];
	     }
	vec[tamv]=aux;
	tamv++;
	aux=0;
	}
	for(i=0;i<n;i++)
	  {	for(j=0;j<m;j++)
	     {
			 aux=aux+M[j][i];
	     }
	vec[tamv]=aux;
	tamv++;
	aux=0;
	}
	
	for(i=0;i<n;i++)
	{
		aux=aux+M[i][i];
	}
	vec[tamv]=aux;
	tamv++;
	aux=0;
	for(i=0;i<n;i++)
	  {	for(j=0;j<m;j++)
	     { if((i+j)==(m-1))
	        {
				aux=aux+M[i][j];
	        }
	     }	
	  }

	vec[tamv]=aux;
	tamv++;
	aux=0;
	k=1;
	for(i=0;i+1<tamv;i++)
	{
		if(vec[i]!=vec[i+1])
			k=0;
	}
	if(k==1)
		cout<<"ES UNA MATRIZ MAGICA"<<endl;
	else
		cout<<"NO ES UNA MATRIZ MAGICA"<<endl;
}

             ejercicio5.cpp
#include "stdafx.h"
#include "VerificarMagica.h"
#include <iostream>
using namespace std;

void main()
{
	VerificarMagica VM;
	VM.cargarmatriz;
	VM.verificar_magica;
	VM.mostrarmatriz;
}  

-----Ejercicio6-----
        .h
#pragma once
#define MAX 100
class MatCC
{
private:
	int M[MAX][MAX],m,n;
public:
	MatCC(void);
	~MatCC(void);
	void cargarmatcircular(int M[MAX][MAX], int n, int m);
};

      .cpp
#include "StdAfx.h"
#include "MatCC.h"
#include <iostream>
using namespace std;

MatCC::MatCC(void)
{
}


MatCC::~MatCC(void)
{
}
void MatCC::cargarmatcircular(int M[MAX][MAX], int n, int m){
	int i,cont,d;
	d=1;
	cont=0;
	while(cont<(n/2))
	{
		for(i=cont;i<(n-cont);i++)
		{
			M[cont][i]=d;
			cout<<"M["<<cont<<"]["<<i<<"]="<<M[cont][i]<<endl;
			d++;
		}
		for(i=cont+1;i<(n-cont);i++)
		{
			M[i][n-1-cont]=d;
			cout<<"M["<<i<<"]["<<n-1-cont<<"]="<<M[i][n-1-cont]<<endl;
			d++;
		}
		for(i=(n-2-cont);i>=cont;i--){
			M[n-1-cont][i]=d;
			cout<<"M["<<n-1-cont<<"]["<<i<<"]="<<M[n-1-cont][i]<<endl;
			d++;
		}
		for(i=(n-2-cont);i>cont;i--)
		{
			M[i][cont]=d;
			cout<<"M["<<i<<"]["<<cont<<"]="<<M[i][cont]<<endl;
			d++;
		}
		cont++;
	}
	if(n%2!=0){
		M[n/2][orden/2]=orden*orden;
		cout<<"M["<<orden/2<<"]["<<orden/2<<"]="<<M[orden/2][orden/2]<<endl;
	}
}

        ejercicio6.cpp
#include "stdafx.h"
#include "MatCC.h"
#include <iostream>
using namespace std;

void main()
{
	MatCC MC;
	MC.cargarmatcircular;
}

------Ejercicio7------
        
        .h
#pragma once
#define MAX 100
class MatDiagonal
{
private:
	int M[MAX][MAX],m,n;
public:
	MatDiagonal(void);
	~MatDiagonal(void);
	void cargarmatdiagonal(int M[MAX][MAX], int n, int m);
};

      .cpp
#include "StdAfx.h"
#include "MatDiagonal.h"
#include <iostream>
using namespace std;

MatDiagonal::MatDiagonal(void)
{
}


MatDiagonal::~MatDiagonal(void)
{
}
void MatDiagonal::cargarmatdiagonal(int M[MAX][MAX], int n, int m){
	int f,c,d,i;
	f=0;
	c=0;
	d=1;
	while(f<n)
	{
		for(i=f;i>=0;i--)
		{
			M[i][c]=d;
			cout<<"M["<<i<<"]["<<c<<"]="<<M[i][c]<<endl;
			d++;
			c++;
		}
		f++;
		c=0;
	}
	c++;
	f=n-1;
	while(c<n)
	{
		for(i=c;i<n;i++)
		{
			M[f][i]=d;
			cout<<"M["<<f<<"]["<<i<<"]="<<M[f][i]<<endl;
			d++;
			f--;
		}
		f=n-1;
		c++;
	}
}

       ejercicio7.cpp
#include "stdafx.h"
#include "MatDiagonal.h"
#include <iostream>
using namespace std;

void main()
{
	MatDiagonal MD;
	MD.cargardiagonal();
}
